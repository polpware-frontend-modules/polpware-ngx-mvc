{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@polpware/ngx-mvc/lib/mvc/platform-oblivious-list-page.ts","ng://@polpware/ngx-mvc/lib/mvc/adaptors/angular-to-controller-adaptor.ts","ng://@polpware/ngx-mvc/lib/mvc/full-feature-list-page.ts","ng://@polpware/ngx-mvc/lib/mvc/ngstore-backed-list-page.ts","ng://@polpware/ngx-mvc/lib/mvc/backbone-backed-list-page.ts","ng://@polpware/ngx-mvc/lib/services/backend-settings.service.ts","ng://@polpware/ngx-mvc/lib/pages/mediators/def-list-base.mediator.ts","ng://@polpware/ngx-mvc/lib/pages/controllers/def-list-base.controller.ts","ng://@polpware/ngx-mvc/lib/pages/components/def-list-base.component.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","hInterface.underscore","PlatformObliviousListPage","moreDataCanBeLoaded","callbacks","onRefresh","onInfinite","turnOnMediator","fromCache","rest","_i","viewInstance","buildViewInstance","listMediator","startService","turnOffMediator","stopService","_","dependencies.underscore","noop","adaptAngularToController","context","$data","init","$scope","setRefreshCallback","callback","setInfiniteCallback","clean","onItemsReady","asyncPush","items","onNewItemsReady","syncPush","asyncPop","syncPop","asyncPrepend","syncPrepend","asyncRefresh","syncRefresh","hasMoreData","flag","getItems","setupSearch","criteria","searchCriteria","doSearch","updateSearchCriteria","getAncestor","ancestor","$loader","show","showLoadingIndicator","hide","hideLoadingIndicator","$refresher","showRefreshingIndicator","hideRefreshingIndicator","$moreLoader","showMoreLoading","hideMoreLoading","$router","go","url","data","$state","$render","ready","onViewDidLoad","destroy","onViewWillUnload","asyncDigest","$navBar","getState","setState","$modal","setData","key","getData","build","$popover","onHidden","$popup","popupInput","extend","confirmed","confirm","prompt","alert","$progressBar","reset","progressBar","createInfinite","onProgress","percentage","destroyInfinite","showAbort","$alertify","alertify","$history","goBack","$ionicHistory","FullFeatureListPage","_super","onDocumentReady","args","ensureDataProvider","onDocumentDestroy","afterMediatorOff","onDataProviderReady","dataProvider","_this","buildMediator","then","afterMediatorOn","doRefresh","doInfinite","setLoadingIndicatorDelay","seconds","NgStoreBackedListPage","defaultLivePeriod","mediatorCtorOptions","useModel","enableInfinite","enableRefresh","_onCacheExpireCallback","store","asNgStoreListMeidator","getNgStore","_storeSubscription","subscribe","w","unsubscribe","ctorOptions","CollectionStore","NgStoreListMediator","setNgStore","setUp","Promise","resolve","defineProperty","readMediatorFromCache","mediatorCache","get","writeMediatorIntoCache","set","evt","tearDown","addOnCacheExpireHandler","preventDefault","addOnExpireHandler","removeOnCacheExpireHandler","rmOnExpireHandler","BackboneBackedListPage","useMediatorWithOnlyLocalDataProvider","localDataProvider","localOptions","WritableListMediator","useMediatorWithGlobalDataProvider","globalDataProvider","globalOptions","mediator","RxjsPoweredWritableListMediator","globalProvider","filterFlags","added","removed","updated","postUseFreshMediator","postUseCachedMediator","cacheKey_1","getCacheKey","asWritableListMediator","cacheKey","pushArray","viewData","viewLevelData","models","slice","BACKEND_SETTINGS","InjectionToken","DefListBaseMediator","Properties","settings","_filter","_keyword","keyword","_pageSize","pageSize","_fromCache","renderData","asyncLoaded","attachView","startServiceImpl","reComputeDataParams","state","_dataProvider","offset","loadInitData","DefListBaseController","_listSettings","getGlobalCache","asDefListBaseMediator","_formCache","_isInit","backendProvider","getBackendService","getRelationalDB","getTable","tableName","getEndPoint","endpointName","touchLocalDataProvider","invokeMediatorCtor","options","DefListBaseComponent","listSettings","_spinner","_toastr","bottomOffset","minHeight","fixedHeight","maxHeight","topOffset","containerClass","initHighlightId","onSelect","EventEmitter","searchEnabled","searchControl","FormControl","totalRecords","spinnerName","ngOnInit","startToListenSpinner","startObserveSearchKeyword","ngOnDestroy","stopListener","stopObserveSearchKeyword","success","closeButton","_searchKeywordSubr","valueChanges","a","toLowerCase","keywordInEffect","anyFutureKeyword","computeSearchState","keywordInEffectState","typeKeywordState","waitForInputState","setValue","emitEvent","startToTypeKeyword","setTimeout","cancelTypedKeyword","searchControlElem","nativeElement","focus","clearKeywordInEffect","refresh","kickOffSearch","k","highlight","selectItem","item","selected","emit","id","find","viewQuery","rf","ctx"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * @fileOverview\n * This abstract class defines a base class for implementing\n * a page with such features as refreshing, loading more, and\n * listening to changes from a global database and inserting\n * or deleting elements accordingly.\n *\n * This class does not depend on any features that a specific\n * platform may provide, such as ionViewDidload and ...unload.\n *\n * @name PlatformAgosticFullFeatureListPage.ts\n * @author Xiaolong Tang <xxlongtang@gmail.com>\n * @license Copyright @me\n */\n\n// By default, we do not listen to any change ..\n\nimport * as hInterface from '@polpware/fe-dependencies';\n\nimport { IViewInstance } from '@polpware/fe-mvc';\n\nimport { IListMediatorPublic } from '@polpware/fe-mvc';\nimport { IMediatorCompatiblePage } from './mediator-compatible-page.interface';\n\nimport {\n    ILoadingIndicator,\n    IRefreshingIndicator,\n    ILoadingMoreIndicator\n} from '../interfaces/indicators.interface';\n\nconst _ = hInterface.underscore;\n\nexport abstract class PlatformObliviousListPage\n    implements IMediatorCompatiblePage,\n    ILoadingIndicator,\n    IRefreshingIndicator,\n    ILoadingMoreIndicator {\n\n    public moreDataCanBeLoaded: boolean;\n    public callbacks: {\n        onRefresh: any,\n        onInfinite: any\n    };\n\n    protected listMediator: IListMediatorPublic;\n\n    constructor() {\n        this.moreDataCanBeLoaded = false;\n        this.callbacks = {\n            onRefresh: null,\n            onInfinite: null\n        };\n    }\n\n    protected abstract buildViewInstance(): IViewInstance;\n\n    protected abstract buildMediator(...args: any[]): PromiseLike<void>;\n\n    protected turnOnMediator(fromCache: boolean, ...rest: any[]) {\n        const viewInstance = this.buildViewInstance();\n        this.listMediator.startService(viewInstance, fromCache);\n    }\n\n    protected turnOffMediator() {\n        this.listMediator.stopService();\n    }\n\n    public abstract showLoadingIndicator(...args: Array<any>): void;\n    public abstract hideLoadingIndicator(...args: Array<any>): void;\n    public abstract setLoadingIndicatorDelay(seconds: number): void;\n\n    public abstract showMoreLoading(...args: Array<any>): void;\n    public abstract hideMoreLoading(...args: Array<any>): void;\n\n    public abstract showRefreshingIndicator(...args: Array<any>): void;\n    public abstract hideRefreshingIndicator(...args: Array<any>): void;\n\n    // Will be invoked from the adaptor and therefore\n    // must be public\n    public abstract onNewItemsReady(items: Array<any>): Array<any>;\n\n    public abstract onItemsReady(): void;\n}\n\n","import * as dependencies from '@polpware/fe-dependencies';\nimport { pushArray } from '@polpware/fe-utilities';\n\nimport { IViewInstance } from '@polpware/fe-mvc';\n\nconst _ = dependencies.underscore;\nconst noop = _.noop;\n\nexport function adaptAngularToController(context): IViewInstance {\n    return {\n        $data: {\n            init: function() {\n                context.$scope.moreDataCanBeLoaded = false;\n            },\n            setRefreshCallback: function(callback) {\n                context.$scope.callbacks.onRefresh = callback;\n            },\n            setInfiniteCallback: function(callback) {\n                context.$scope.callbacks.onInfinite = callback;\n            },\n            clean: function() {\n                context.$scope.onItemsReady();\n            },\n            asyncPush: function(items) {\n                context.$scope.onNewItemsReady(items);\n                context.$scope.onItemsReady();\n            },\n            syncPush: function(items) {\n                context.$scope.onNewItemsReady(items);\n                context.$scope.onItemsReady();\n            },\n\n            asyncPop: function(items) {\n                context.$scope.onItemsReady();\n            },\n            syncPop: function(items) {\n                context.$scope.onItemsReady();\n            },\n            asyncPrepend: function(items) {\n                context.$scope.onNewItemsReady(items);\n                context.$scope.onItemsReady();\n            },\n            syncPrepend: function(items) {\n                context.$scope.onNewItemsReady(items);\n                context.$scope.onItemsReady();\n            },\n            asyncRefresh: noop,\n            syncRefresh: noop,\n            hasMoreData: function(flag) {\n                context.$scope.moreDataCanBeLoaded = flag;\n            },\n            getItems: function() {\n            },\n            setupSearch: function(criteria, callback) {\n                context.$scope.searchCriteria = criteria;\n                context.$scope.doSearch = callback;\n            },\n            updateSearchCriteria: function(criteria) {\n                context.$scope.searchCriteria = criteria;\n            },\n            getAncestor: function() {\n                return context.$scope.ancestor;\n            }\n        },\n        $loader: {\n            show: function() {\n                context.$scope.showLoadingIndicator();\n            },\n            hide: function() {\n                context.$scope.hideLoadingIndicator();\n            }\n        },\n        $refresher: {\n            show: function() {\n                context.$scope.showRefreshingIndicator();\n            },\n            hide: function() {\n                context.$scope.hideRefreshingIndicator();\n            }\n        },\n        $moreLoader: {\n            show: function() {\n                context.$scope.showMoreLoading();\n            },\n            hide: function() {\n                context.$scope.hideMoreLoading();\n            }\n        },\n        $router: {\n            go: function(url, data) {\n                context.$state.go(url, data);\n            }\n        },\n        $render: {\n            ready: function(callback) {\n                context.$scope.callbacks.onViewDidLoad = callback;\n            },\n            destroy: function(callback) {\n                context.$scope.callbacks.onViewWillUnload = callback;\n            },\n            asyncDigest: noop\n        },\n        $navBar: {\n            /**\n             * Get current state\n             * @returns {}\n             */\n            getState: noop,\n            /**\n             * Set state\n             * @param {Boolean} s\n             */\n            setState: noop\n        },\n        $modal: {\n            setData: function(key, data) {\n                context.$scope[key] = data;\n            },\n            getData: function(key) {\n                return context.$scope[key];\n            },\n            build: noop\n        },\n        $popover: {\n            setData: function(key, data) {\n                context.$scope[key] = data;\n            },\n            getData: function(key) {\n                return context.$scope[key];\n            },\n            build: noop,\n            onHidden: noop\n        },\n        $popup: {\n            setData: function(data) {\n                context.$scope.popupInput = _.extend({\n                    confirmed: false\n                }, data);\n            },\n            getData: function() {\n                return context.$scope.popupInput;\n            },\n            build: noop,\n            confirm: noop,\n            prompt: noop,\n            alert: noop\n        },\n        $progressBar: {\n            create: noop,\n            reset: function() {\n                context.$scope.progressBar = 0;\n            },\n            createInfinite: noop,\n            onProgress: function(percentage) {\n                context.$scope.progressBar = percentage;\n            },\n            destroy: noop,\n            destroyInfinite: noop,\n            showAbort: noop\n        },\n        $alertify: context.alertify,\n        $history: {\n            goBack: function() {\n                context.$ionicHistory.goBack();\n            }\n        }\n    };\n}\n\n","import { IViewInstance } from '@polpware/fe-mvc';\nimport { IListMediatorPublic } from '@polpware/fe-mvc';\n// base\nimport {\n    PlatformObliviousListPage\n} from './platform-oblivious-list-page';\n\nimport {\n    adaptAngularToController\n} from './adaptors/angular-to-controller-adaptor';\n\nexport interface IPageLifeCycle {\n    onDocumentReady(...args: Array<any>): void;\n    onDocumentDestroy(...args: Array<any>): void;\n}\n\nexport abstract class FullFeatureListPage\n    extends PlatformObliviousListPage implements IPageLifeCycle {\n\n    onDocumentReady(...args: Array<any>) {\n        // Cache will be provided in its derived class\n        this.ensureDataProvider(...args);\n    }\n\n    onDocumentDestroy(...args: Array<any>) {\n\n        // Cache will be provided in its derived class\n\n        this.turnOffMediator();\n        this.afterMediatorOff();\n    }\n\n    protected abstract ensureDataProvider(...args: Array<any>): void;\n    protected abstract afterMediatorOn(): void;\n    protected abstract afterMediatorOff(): void;\n\n    protected abstract readMediatorFromCache(key: string): IListMediatorPublic;\n    protected abstract writeMediatorIntoCache(key: string, value: IListMediatorPublic): void;\n    protected abstract addOnCacheExpireHandler(key: string): void;\n    protected abstract removeOnCacheExpireHandler(key: string): void;\n\n    // May be not needed. \n    protected onDataProviderReady(dataProvider: any): void {\n        this.buildMediator(dataProvider).then(() => {\n            this.turnOnMediator(false);\n            this.afterMediatorOn();\n        });\n    }\n\n    // Override\n    protected buildViewInstance(): IViewInstance {\n        return adaptAngularToController({\n            $scope: this\n        });\n    }\n\n    public doRefresh() {\n        // Trigger refresh\n        if (this.callbacks.onRefresh) {\n            this.callbacks.onRefresh();\n        }\n    }\n\n    public doInfinite() {\n        // Trigger loading more\n        if (this.callbacks.onInfinite) {\n            this.callbacks.onInfinite();\n        }\n    }\n\n    public showLoadingIndicator(...args: any[]) { }\n\n    public hideLoadingIndicator(...args: any[]) { }\n\n    public setLoadingIndicatorDelay(seconds: number) { }\n\n    public showMoreLoading(...args: any[]) { }\n\n    public hideMoreLoading(...args: any[]) { }\n\n    public showRefreshingIndicator(...args: any[]) { }\n\n    public hideRefreshingIndicator(...args: any[]) { }\n\n}\n\n","import { Subscription } from 'rxjs';\n\nimport {\n    IListMediatorCtorOptions\n} from '@polpware/fe-mvc';\n\nimport {\n    NgStoreListMediator,\n    INgStoreListMediatorPublic\n} from '@polpware/fe-mvc';\n\nimport {\n    ICollectionItem\n} from '@polpware/fe-data';\n\nimport {\n    CollectionStore\n} from '@polpware/fe-data';\n\n\nimport {\n    ISlidingExpireCache\n} from '@polpware/fe-data';\n\n// base\nimport { FullFeatureListPage } from './full-feature-list-page';\n\n// Note that in the class, please avoid to depend on onNewItemsReady,\n// as it is NOT in the update flow.\n\nexport abstract class NgStoreBackedListPage<T extends ICollectionItem>\n    extends FullFeatureListPage {\n\n    protected defaultLivePeriod = 60 * 5;\n\n    // More configuration for constructing dataprovider\n    protected mediatorCtorOptions: IListMediatorCtorOptions;\n\n    protected mediatorCache: ISlidingExpireCache<INgStoreListMediatorPublic>;\n    private _onCacheExpireCallback: any;\n\n    private _storeSubscription: Subscription;\n    public items: T[];\n\n    constructor() {\n        super();\n\n        this.mediatorCtorOptions = {\n            useModel: true,\n            enableInfinite: true,\n            enableRefresh: true\n        };\n        this.items = [];\n        this._onCacheExpireCallback = null;\n    }\n\n    // Override\n    protected turnOnMediator(fromCache: boolean) {\n        super.turnOnMediator(fromCache);\n\n        const store = this.asNgStoreListMeidator.getNgStore();\n        this._storeSubscription = store.getState().subscribe((data) => {\n            const w = data.items as T[];\n            this.items = w;\n            // Note that we must call onItemsReady ... \n            this.onItemsReady();\n        });\n    }\n\n    // Override\n    protected turnOffMediator() {\n        this._storeSubscription.unsubscribe();\n        super.turnOffMediator();\n    }\n\n    // Override\n    protected buildMediator(dataProvider: any): PromiseLike<void> {\n\n        const ctorOptions: IListMediatorCtorOptions = {\n            ...this.mediatorCtorOptions,\n            dataProvider: dataProvider\n        };\n\n        const s = new CollectionStore<T>();\n\n        const m: INgStoreListMediatorPublic = new NgStoreListMediator(ctorOptions);\n        m.setNgStore(s);\n\n        this.listMediator = m;\n        this.listMediator.setUp();\n\n        return Promise.resolve();\n    }\n\n    protected get asNgStoreListMeidator(): INgStoreListMediatorPublic {\n        const m = this.listMediator;\n        return m as INgStoreListMediatorPublic;\n    }\n\n    protected readMediatorFromCache(key: string): INgStoreListMediatorPublic {\n        return this.mediatorCache.get(key, this.defaultLivePeriod);\n    }\n\n    protected writeMediatorIntoCache(key: string, value: INgStoreListMediatorPublic): void {\n        this.mediatorCache.set(key, value, this.defaultLivePeriod, (evt) => {\n            value.tearDown();\n            return evt;\n        });\n    }\n\n    protected addOnCacheExpireHandler(key: string): void {\n        this._onCacheExpireCallback = function(evt) {\n            evt.preventDefault();\n            return evt;\n        };\n\n        this.mediatorCache.addOnExpireHandler(key, this._onCacheExpireCallback);\n    }\n\n    protected removeOnCacheExpireHandler(key: string): void {\n        this.mediatorCache.rmOnExpireHandler(key, this._onCacheExpireCallback);\n        this._onCacheExpireCallback = null;\n    }\n\n    // Default implementation.\n    // Override\n    // Note that in the derived class we do NOT depend on it.\n    onNewItemsReady(items: T[]) {\n        return items;\n    }\n\n}\n\n","import { Subscription } from 'rxjs';\n\nimport { IViewInstance } from '@polpware/fe-mvc';\n\nimport { pushArray } from '@polpware/fe-utilities';\n\nimport {\n    WritableListMediator,\n    IWritableListMediatorCtorOptions,\n    IWritableListMediatorPublic\n} from '@polpware/fe-mvc';\n\nimport {\n    RxjsPoweredWritableListMediator\n} from '@polpware/fe-mvc';\n\nimport {\n    ICollectionItem\n} from '@polpware/fe-data';\n\nimport {\n    ISlidingExpireCache\n} from '@polpware/fe-data';\n\n// base\nimport { FullFeatureListPage } from './full-feature-list-page';\n\n// Note that we use ICollectionItem rather than IModelLike,\n// because we assume the least requirement for the input type.\n// Precisely, the only requirement is that the collection item has an\n// id field. \n\nexport abstract class BackboneBackedListPage<T extends ICollectionItem>\n    extends FullFeatureListPage {\n\n    protected defaultLivePeriod = 60 * 5;\n\n    protected mediatorCache: ISlidingExpireCache<IWritableListMediatorPublic>;\n    private _onCacheExpireCallback: any;\n\n    public items: T[];\n\n    constructor() {\n        super();\n\n        this.items = [];\n        this._onCacheExpireCallback = null;\n    }\n\n    // We use a functon to compute cacheKey, so that we can\n    // compute the cache key with more inputs. \n    protected abstract getCacheKey(...args: any[]): string;\n\n    protected get asWritableListMediator(): IWritableListMediatorPublic {\n        const m = this.listMediator;\n        return m as IWritableListMediatorPublic;\n    }\n\n    // Default implementation for using backbone\n    protected useMediatorWithOnlyLocalDataProvider(localDataProvider: any, localOptions?: object) {\n\n        const ctorOptions: IWritableListMediatorCtorOptions = {\n            dataProvider: localDataProvider,\n            useModel: true,\n            enableInfinite: true,\n            enableRefresh: true\n        };\n\n        const s = new WritableListMediator(ctorOptions);\n        this.listMediator = s;\n        this.listMediator.setUp();\n    }\n\n    protected useMediatorWithGlobalDataProvider(localDataProvider: any, globalDataProvider: any,\n        localOptions?: object, globalOptions?: object) {\n\n        const mediator = new RxjsPoweredWritableListMediator({\n            globalProvider: globalDataProvider,\n            filterFlags: {\n                added: true,\n                removed: true,\n                updated: false\n            },\n            dataProvider: localDataProvider,\n            useModel: true\n        });\n\n        this.listMediator = mediator;\n        this.listMediator.setUp();\n    }\n\n    // Invoked after the new mediator is constructure \n    protected postUseFreshMediator(...args: any[]) {\n        this.turnOnMediator(false, ...args);\n        this.afterMediatorOn();\n    }\n\n    // Invoked after the cached mediator is used \n    protected postUseCachedMediator(...args: any[]) {\n        this.turnOnMediator(true, ...args);\n        this.afterMediatorOn();\n    }\n\n    // Override to support cache\n    protected ensureDataProvider(...args: any[]) {\n        if (this.mediatorCache) {\n\n            const cacheKey = this.getCacheKey(...args);\n            let inCache = false;\n\n            const mediator = this.readMediatorFromCache(cacheKey);\n\n            if (!mediator) { // Not in cache\n\n                this.buildMediator(...args).then(() => {\n                    // set up in the cache\n                    this.writeMediatorIntoCache(cacheKey, this.asWritableListMediator);\n\n                    // case 1:\n                    this.postUseFreshMediator(true, ...args);\n                });\n\n            } else { // In cache\n\n                inCache = true;\n                this.listMediator = mediator;\n\n                // Case 2:\n                this.postUseCachedMediator(...args);\n            }\n\n        } else {\n\n            this.buildMediator(...args).then(() => {\n\n                // Case 3: \n                this.postUseFreshMediator(false, ...args);\n            });\n        }\n    }\n\n    // Override\n    protected afterMediatorOn() {\n        if (this.mediatorCache) {\n            // In this case, we do not Provide any inputs \n            const cacheKey = this.getCacheKey();\n            this.addOnCacheExpireHandler(cacheKey);\n        }\n    }\n\n    // Override\n    protected afterMediatorOff() {\n        if (this.mediatorCache) {\n            // In this case, we do not Provide any inputs\n            const cacheKey = this.getCacheKey();\n            this.removeOnCacheExpireHandler(cacheKey);\n        }\n    }\n\n\n    // Default implementation\n    public onNewItemsReady(items: Array<any>): Array<any> {\n        pushArray(this.items, items);\n        return items;\n    }\n\n    // Default implementation.\n    onItemsReady() {\n        const viewData = this.asWritableListMediator.viewLevelData();\n        // Get the data from the view level data \n        this.items = viewData.models.slice(0);\n    }\n\n    // Note that it is up to the caller to decide how to use the\n    // cached value; we need to precisely tell where there is a value in the cache\n    // for the corresponding key\n    protected readMediatorFromCache(key: string): IWritableListMediatorPublic {\n        return this.mediatorCache.get(key, this.defaultLivePeriod);\n    }\n\n    protected writeMediatorIntoCache(key: string, mediator: IWritableListMediatorPublic): void {\n        this.mediatorCache.set(key, mediator, this.defaultLivePeriod, (evt) => {\n            mediator.tearDown();\n            return evt;\n        });\n    }\n\n    protected addOnCacheExpireHandler(key: string): void {\n        this._onCacheExpireCallback = function(evt) {\n            evt.preventDefault();\n            return evt;\n        };\n\n        this.mediatorCache.addOnExpireHandler(key, this._onCacheExpireCallback);\n    }\n\n    protected removeOnCacheExpireHandler(key: string): void {\n        this.mediatorCache.rmOnExpireHandler(key, this._onCacheExpireCallback);\n        this._onCacheExpireCallback = null;\n    }\n\n}\n\n","import { InjectionToken } from '@angular/core';\n\nexport class BackendSettings {\n    urlBase: string;\n}\n\nexport const BACKEND_SETTINGS = new InjectionToken<BackendSettings>('Backend Settings');\n","import { IRxjsPoweredDirContentMediatorDev, IWritableListMediatorCtorOptions, IWritableListMediatorPublic, RxjsPoweredWritableListMediator } from '@polpware/fe-mvc';\n\nexport interface IDefListBaseMediatorCtorOptions extends IWritableListMediatorCtorOptions {\n    keyword?: string;\n    pageSize?: number;\n}\n\n/** Specifies the internal interface for accessing the properties \n * of the internal implementation of a mediator.\n * \n * This interface is supposed used only in the traditional way of implementing a \n * a class, e.g., the way of xx.extend({}). \n * \n * Using this interface helps the editor to figure out the correct properties \n * when we implement the mediator.\n */\nexport interface IDefListBaseMediatorDev extends IRxjsPoweredDirContentMediatorDev {\n    _filter: string;\n    _keyword: string;\n    _pageSize: number;\n    _fromCache: boolean;\n\n    reComputeDataParams();\n}\n\n/** Specifies the interface that we can use in the controller \n * which uses the mediator.\n *  \n * This interface and the above interface describes the same object in \n * two distinct perspectives. The above one defines the interface from the \n * perspective of implmenting a meditator. This one defines the interface \n * from the perspective of a client.\n * \n * Using this interface helps the editor to figure out the correct methods \n * we may use in the controller and its sub-classes.\n */\nexport interface IDefListBaseMediatorPublic extends IWritableListMediatorPublic {\n\n    // filter is not exposed yet, because we do not know how to use it in the controller yet.\n\n    // We only manipulate pageSize internally, and then\n    // it is not necessary to expose it to the controller.\n\n    keyword(value?: string): string;\n\n    // Read the value of formCache\n    _formCache: boolean;\n    _isInit: boolean;\n}\n\nexport const DefListBaseMediator = RxjsPoweredWritableListMediator.extend({\n\n    /* Properties */\n    Properties: 'filter,keyword,pageSize',\n\n    /**\n     * Override\n     * \n     * @param settings\n     */\n    init: function(settings: IDefListBaseMediatorCtorOptions) {\n        const self: IDefListBaseMediatorDev = this;\n        self._super(settings);\n\n        self._filter = '';\n        // Init \n        self._keyword = settings.keyword || '';\n        self._pageSize = settings.pageSize || 40;\n        self._fromCache = false;\n    },\n\n    /**\n     * Override \n     * Render data in \n     * @param asyncLoaded\n     */\n    renderData: function(asyncLoaded: boolean) {\n        const self: IDefListBaseMediatorDev = this;\n        self._super(asyncLoaded);\n    },\n\n    /**\n     * Override \n     * so that we can reload data even in the case of cache\n     * @param {} fromCache\n     */\n    startService: function(viewInstance, fromCache: boolean) {\n        const self: IDefListBaseMediatorDev = this;\n        self.attachView(viewInstance);\n        if (fromCache === true) {\n            self._fromCache = true;\n            self.renderData(true);\n        } else {\n            self._fromCache = false;\n            // Enforce that keyword is ''\n            self.startServiceImpl();\n        }\n    },\n\n    /**\n     * Override\n     */\n    reComputeDataParams: function() {\n        const self: IDefListBaseMediatorDev = this;\n        // target\n        const state = self._dataProvider.state;\n        state.offset = 0;\n        state.keyword = self._keyword || '';\n    },\n\n    /**\n     * Override\n     */\n    loadInitData: function() {\n        const self: IDefListBaseMediatorDev = this;\n        self.reComputeDataParams();\n        return self._super();\n    }\n\n});\n","\nimport { IFullBackboneCollectionLike, ICollectionItem } from '@polpware/fe-data';\n// base\nimport { BackboneBackedListPage } from '../../mvc/backbone-backed-list-page';\n\nimport {\n    IDefListBaseMediatorCtorOptions,\n    DefListBaseMediator,\n    IDefListBaseMediatorPublic\n} from '../mediators/def-list-base.mediator';\n\nexport interface IDefListBaseControllerSettings {\n    endpointName: string;\n    tableName: string;\n    cacheKey: string;\n}\n\nexport abstract class DefListBaseController<T extends ICollectionItem> extends BackboneBackedListPage<T> {\n\n    constructor(protected readonly _listSettings: IDefListBaseControllerSettings) {\n        // If we navigated to this page, we will have an item available as a nav param\n        super();\n\n        this.mediatorCache = this.getGlobalCache();\n    }\n\n    public get asDefListBaseMediator(): IDefListBaseMediatorPublic {\n        return this.listMediator as IDefListBaseMediatorPublic;\n    }\n\n    /**\n     * Indicates whether the underlying medicator is built from the previous \n     * cache or not. \n     */\n    public get fromCache() {\n        // Get the fromCache value ...\n        return this.listMediator ? this.asDefListBaseMediator._formCache : false;\n    }\n\n    /**\n     * Indicates whether the underlying medicator is still in the init stage, \n     * I.e., the underlying mediator has not conducted any request or not. \n     */\n    public get inInitState() {\n        return this.listMediator ? this.asDefListBaseMediator._isInit : true;\n    }\n\n    protected getCacheKey(): string {\n        return this._listSettings.cacheKey;\n    }\n\n    protected abstract getBackendService(): any;\n    protected abstract getGlobalCache(): any;\n    protected abstract getRelationalDB(): any;\n\n    /**\n     * Builds the underlying mediator\n     * @param keyword The parameter is passed all the way from the\n     * onDocumentReady method.\n     */\n    protected buildMediator(keyword: string): PromiseLike<void> {\n\n        const backendService = this.getBackendService();\n        const backendProvider = backendService.backendProvider;\n\n        let globalDataProvider: IFullBackboneCollectionLike = null;\n\n        const reDBService = this.getRelationalDB();\n        const relDB = reDBService.get();\n\n        // Build collections\n        globalDataProvider = relDB.getTable(this._listSettings.tableName).dataProvider();\n\n        // Local data provider\n        // The parameter is the endpoint defined by backend.service\n        const Ctor = backendProvider.getEndPoint(this._listSettings.endpointName);\n        const localDataProvider = new Ctor();\n\n        this.touchLocalDataProvider(localDataProvider);\n\n        // Init data provider \n        localDataProvider.state.pageSize = 40;\n        localDataProvider.state.keyword = keyword;\n\n        const filterOptions = globalDataProvider ? {\n            added: true,\n            removed: true,\n            updated: false\n        } : {\n                added: false,\n                removed: false,\n                updated: false\n            };\n\n        const ctorOptions: IDefListBaseMediatorCtorOptions = {\n            globalProvider: globalDataProvider,\n            filterFlags: filterOptions,\n            dataProvider: localDataProvider,\n            useModel: true,\n            keyword: keyword,\n            pageSize: 40,\n            enableInfinite: true,\n            enableRefresh: true\n        };\n\n        this.listMediator = this.invokeMediatorCtor(ctorOptions);\n        this.listMediator.setUp();\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Provides a chance to invoke a derived mediator in the derived controller.\n     * @param options\n     */\n    protected invokeMediatorCtor(options: IDefListBaseMediatorCtorOptions) {\n        return new DefListBaseMediator(options);\n    }\n\n    /**\n     * Provides a chance to update the freshly generated data provider.\n     * E.g., we can use this method to update the endpoint url. \n     */\n    protected touchLocalDataProvider(dataProvider: any) {\n    }\n\n}\n","import { ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ICollectionItem } from '@polpware/fe-data';\r\nimport { INgxNoty } from '@polpware/ngx-noty';\r\nimport { Subscription } from 'rxjs';\r\nimport { DefListBaseController, IDefListBaseControllerSettings } from '../controllers/def-list-base.controller';\r\n\r\nexport interface IDefListBaseComponentSettings extends IDefListBaseControllerSettings {\r\n    spinnerName: string;\r\n}\r\n\r\nexport interface ISpinnerLike {\r\n    show(...args: any[]);\r\n    hide(...args: any[]);\r\n    startToListenSpinner(...args: any[]);\r\n    stopListener(...args: any[]);\r\n}\r\n\r\nexport abstract class DefListBaseComponent<T extends ICollectionItem> extends DefListBaseController<T> {\r\n\r\n    @Input() bottomOffset = 0;\r\n    @Input() minHeight = 0;\r\n    @Input() fixedHeight = 0;\r\n    @Input() maxHeight = 0;\r\n    @Input() topOffset = 0;\r\n    @Input() containerClass = '';\r\n    @Input() initHighlightId: string = '';\r\n\r\n    @Output() onSelect = new EventEmitter();\r\n\r\n    @ViewChild('searchControlElem')\r\n    searchControlElem: ElementRef;\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    // Defines the states for the search state machine\r\n    //   waitForInput --> typeKeywordState\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    // \r\n    public searchEnabled: boolean;\r\n    // \r\n    // This flag Decides if we can display a control\r\n    // which further decides the visibility of the search input control.\r\n    //\r\n    // This flag is used when we have another level of\r\n    // controlling whether the search input should be visible or not.\r\n    // E.g., When the space is limited, we may display a control flag\r\n    // to turn on the visiblity of the real search input, and\r\n    // by default only shows the control flag.\r\n    // \r\n    public waitForInputState: boolean;\r\n    //\r\n    // This flag decides if the search input control should be visible\r\n    // or not. \r\n    // \r\n    public typeKeywordState: boolean;\r\n    //\r\n    // This property tracks the current effective keyword. \r\n    // \r\n    public keywordInEffect: string;\r\n    //\r\n    // This flag decides if any keyword is in effctive.\r\n    //\r\n    // It is used when generating the state of the search result.\r\n    // \r\n    public keywordInEffectState: boolean;\r\n    // Search control input\r\n    public searchControl: FormControl;\r\n\r\n    //\r\n    // This property tracks if there is any keyword \r\n    // which may be applied in the future.\r\n    // E.g., though there is a keyword in effect,\r\n    // a user may enter new keyword in the search input control\r\n    // and the new value is not equal to the current effective\r\n    // keyword. In this case, anyFutureKeyword tells the new value. \r\n    public anyFutureKeyword: string;\r\n\r\n    //\r\n    // Tracks the currently selected item.\r\n    // We decide not to change the value of the selected item.\r\n    // Instead, each controller may have its own selected item.\r\n    // Doing so, there is no interference among different controllers,\r\n    // even though they share the same underlying data. \r\n    public selected: T;\r\n\r\n    private _searchKeywordSubr: Subscription;\r\n\r\n    constructor(listSettings: IDefListBaseComponentSettings,\r\n        protected readonly _spinner: ISpinnerLike,\r\n        protected readonly _toastr: INgxNoty) {\r\n        super(listSettings);\r\n        // By default, search is enabled\r\n        this.searchEnabled = true;\r\n        this.searchControl = new FormControl('');\r\n    }\r\n\r\n    // Compute the total number of records from the underlying mediator\r\n    // and further the data provider of the mediator.\r\n    get totalCount() {\r\n        return this.asDefListBaseMediator.dataProvider().state.totalRecords;\r\n    }\r\n\r\n    // As above, compute the loaded number of records so far.\r\n    get offset() {\r\n        return this.asDefListBaseMediator.dataProvider().state.totalRecords;\r\n    }\r\n\r\n    get spinnerName() {\r\n        return (this._listSettings as IDefListBaseComponentSettings).spinnerName;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this._spinner.startToListenSpinner(this.spinnerName);\r\n\r\n        this.onDocumentReady();\r\n        this.startObserveSearchKeyword();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._spinner.stopListener(this.spinnerName);\r\n\r\n        this.onDocumentDestroy();\r\n        this.stopObserveSearchKeyword();\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    // Overrides to tweak the behaviors of the loading/unloading logic\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n    /**\r\n     * Following building a mediator or retrieving a mediator from cache, \r\n     * this method turns on the mediator to trigger network request. \r\n     * \r\n     * @param fromCache\r\n     * @param keyword The parameters from the second one are passed all the way from the \r\n     * onDocumentReady method.\r\n     */\r\n    protected turnOnMediator(fromCache: boolean, keyword: string) {\r\n        super.turnOnMediator(fromCache, keyword);\r\n\r\n        // TODO: Check if we need the following logic?\r\n\r\n        // if (this.searchEnabled) {\r\n        //     // Synchronizing the UI and the internal state\r\n        //     const keyword = this.asDefListBaseMediator.keyword();\r\n        //     if (keyword) {\r\n        //         keyword = keyword.toLowerCase();\r\n        //         this.searchControl.setValue(keyword, {\r\n        //             emitEvent: false\r\n        //         });\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    // Indicators\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Override\r\n    public showLoadingIndicator() {\r\n        this._spinner.show('Loading ...', this.spinnerName);\r\n    }\r\n\r\n    public hideLoadingIndicator() {\r\n        this._spinner.hide(this.spinnerName);\r\n    }\r\n\r\n    // Override\r\n    public showMoreLoading(): void {\r\n        this._spinner.show('Loading ...', this.spinnerName);\r\n    }\r\n\r\n    // Override\r\n    public hideMoreLoading(): void {\r\n        this._spinner.hide(this.spinnerName);\r\n    }\r\n\r\n    // Override\r\n    public showRefreshingIndicator(): void {\r\n        this._spinner.show('Loading ...', this.spinnerName);\r\n    }\r\n\r\n    // Override\r\n    public hideRefreshingIndicator(): void {\r\n        this._spinner.hide(this.spinnerName)\r\n        // Release a message \r\n        this._toastr.success(`List was just refreshed.`,\r\n            'Success', {\r\n            closeButton: true\r\n        });\r\n\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    // Search state machine\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Start to listen for search keyword change\r\n    protected startObserveSearchKeyword() {\r\n        this._searchKeywordSubr = this.searchControl.valueChanges.subscribe(a => {\r\n            a = (a || '').toLowerCase();\r\n            if (a && a !== this.keywordInEffect) {\r\n                this.anyFutureKeyword = a;\r\n            } else {\r\n                this.anyFutureKeyword = '';\r\n            }\r\n        });\r\n    }\r\n\r\n    protected stopObserveSearchKeyword() {\r\n        this._searchKeywordSubr && this._searchKeywordSubr.unsubscribe();\r\n    }\r\n\r\n    // Recomputes the search state\r\n    //\r\n    // \r\n    protected computeSearchState() {\r\n        this.anyFutureKeyword = '';\r\n        this.keywordInEffectState = false;\r\n        this.typeKeywordState = false;\r\n        this.waitForInputState = false;\r\n        let keyword = this.asDefListBaseMediator.keyword();\r\n\r\n        if (keyword) {\r\n            keyword = keyword.toLowerCase();\r\n            this.keywordInEffect = keyword;\r\n            this.keywordInEffectState = true;\r\n\r\n            // Make sure that the search input has the latest value\r\n            let rhs = this.searchControl.value || '';\r\n            rhs = rhs.toLowerCase();\r\n            if (rhs !== keyword) {\r\n                this.searchControl.setValue(keyword, {\r\n                    emitEvent: false\r\n                });\r\n            }\r\n\r\n        } else {\r\n            this.waitForInputState = true;\r\n\r\n            // Make sure that the search input has the latest value\r\n            let rhs = this.searchControl.value || '';\r\n            rhs = rhs.toLowerCase();\r\n            if (rhs) {\r\n                this.searchControl.setValue('', {\r\n                    emitEvent: false\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // Swtiches to the state for providing\r\n    // the search input control for end users.\r\n    // \r\n    public startToTypeKeyword() {\r\n        this.anyFutureKeyword = '';\r\n        this.waitForInputState = false;\r\n        this.keywordInEffectState = false;\r\n        this.typeKeywordState = true;\r\n\r\n        // Schedule focus behavior in next round of UI updating,\r\n        // in order that the above settings are already in effect.\r\n        setTimeout(() => {\r\n            // TODO: Fix this\r\n            // this.focusFolderSearchInput();\r\n        });\r\n    }\r\n\r\n    // Cancel typed keyword and\r\n    // reset to whatever the previous state\r\n    //\r\n    // This operation does not cause new network request.\r\n    public cancelTypedKeyword() {\r\n        this.computeSearchState();\r\n\r\n        // Auto focus the search input\r\n        this.searchControlElem.nativeElement.focus();\r\n    }\r\n\r\n    // Clear up keyword\r\n    //\r\n    // This operation causes new network request.\r\n    public clearKeywordInEffect() {\r\n        this.asDefListBaseMediator.keyword('');\r\n        this.asDefListBaseMediator.refresh(true);\r\n\r\n        // Auto focus the search input\r\n        this.searchControlElem.nativeElement.focus();\r\n    }\r\n\r\n    // Starts a new round of search\r\n    //\r\n    // This operation causes new network request.\r\n    public kickOffSearch() {\r\n        const k = this.searchControl.value;\r\n        // TODO: Normalize into lowercase ?\r\n\r\n        const currentKeyword = this.asDefListBaseMediator.keyword;\r\n        if (k === currentKeyword) {\r\n            // Nothing to do;\r\n            this.computeSearchState();\r\n            return;\r\n        }\r\n\r\n        // Otherwise, move forward to search \r\n        this.asDefListBaseMediator.keyword(k);\r\n        this.asDefListBaseMediator.refresh(true);\r\n    }\r\n\r\n\r\n    // Override\r\n    //\r\n    // The extra operation allows for synchronizing the internal state\r\n    // with the user interface.\r\n    public onItemsReady(): void {\r\n        super.onItemsReady();\r\n\r\n        this.computeSearchState();\r\n\r\n        if (this.initHighlightId) {\r\n            this.highlight(this.initHighlightId);\r\n        }\r\n    }\r\n\r\n    /**\r\n      * Sends a notification back to its parent or client.\r\n      * @param item A data entity.\r\n      */\r\n    selectItem(item: T) {\r\n        this.initHighlightId = null;\r\n        this.selected = item;\r\n        this.onSelect.emit(item);\r\n    }\r\n\r\n    /**\r\n     * Allows the client to highlight an item by Id.\r\n     * @param id\r\n     */\r\n    highlight(id: string) {\r\n        const item = this.items.find(a => a.id == id);\r\n        if (item && this.selected !== item) {\r\n            this.selected = item;\r\n        }\r\n    }\r\n\r\n}\r\n"]}
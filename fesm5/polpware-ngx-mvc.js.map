{"version":3,"file":"polpware-ngx-mvc.js","sources":["ng://@polpware/ngx-mvc/lib/mvc/platform-oblivious-list-page.ts","ng://@polpware/ngx-mvc/lib/mvc/adaptors/angular-to-controller-adaptor.ts","ng://@polpware/ngx-mvc/lib/mvc/full-feature-list-page.ts","ng://@polpware/ngx-mvc/lib/mvc/ngstore-backed-list-page.ts","ng://@polpware/ngx-mvc/lib/mvc/backbone-backed-list-page.ts","ng://@polpware/ngx-mvc/lib/services/backend-settings.service.ts","ng://@polpware/ngx-mvc/lib/pages/mediators/def-list-base.mediator.ts","ng://@polpware/ngx-mvc/lib/pages/controllers/def-list-base.controller.ts","ng://@polpware/ngx-mvc/lib/pages/components/def-list-base.component.ts","ng://@polpware/ngx-mvc/public_api.ts","ng://@polpware/ngx-mvc/polpware-ngx-mvc.ts"],"sourcesContent":["/**\n * @fileOverview\n * This abstract class defines a base class for implementing\n * a page with such features as refreshing, loading more, and\n * listening to changes from a global database and inserting\n * or deleting elements accordingly.\n *\n * This class does not depend on any features that a specific\n * platform may provide, such as ionViewDidload and ...unload.\n *\n * @name PlatformAgosticFullFeatureListPage.ts\n * @author Xiaolong Tang <xxlongtang@gmail.com>\n * @license Copyright @me\n */\n\n// By default, we do not listen to any change ..\n\nimport * as hInterface from '@polpware/fe-dependencies';\n\nimport { IViewInstance } from '@polpware/fe-mvc';\n\nimport { IListMediatorPublic } from '@polpware/fe-mvc';\nimport { IMediatorCompatiblePage } from './mediator-compatible-page.interface';\n\nimport {\n    ILoadingIndicator,\n    IRefreshingIndicator,\n    ILoadingMoreIndicator\n} from '../interfaces/indicators.interface';\n\nconst _ = hInterface.underscore;\n\nexport abstract class PlatformObliviousListPage\n    implements IMediatorCompatiblePage,\n    ILoadingIndicator,\n    IRefreshingIndicator,\n    ILoadingMoreIndicator {\n\n    public moreDataCanBeLoaded: boolean;\n    public callbacks: {\n        onRefresh: any,\n        onInfinite: any\n    };\n\n    protected listMediator: IListMediatorPublic;\n\n    constructor() {\n        this.moreDataCanBeLoaded = false;\n        this.callbacks = {\n            onRefresh: null,\n            onInfinite: null\n        };\n    }\n\n    protected abstract buildViewInstance(): IViewInstance;\n\n    protected abstract buildMediator(...args: any[]): PromiseLike<void>;\n\n    protected turnOnMediator(fromCache: boolean, ...rest: any[]) {\n        const viewInstance = this.buildViewInstance();\n        this.listMediator.startService(viewInstance, fromCache);\n    }\n\n    protected turnOffMediator() {\n        this.listMediator.stopService();\n    }\n\n    public abstract showLoadingIndicator(...args: Array<any>): void;\n    public abstract hideLoadingIndicator(...args: Array<any>): void;\n    public abstract setLoadingIndicatorDelay(seconds: number): void;\n\n    public abstract showMoreLoading(...args: Array<any>): void;\n    public abstract hideMoreLoading(...args: Array<any>): void;\n\n    public abstract showRefreshingIndicator(...args: Array<any>): void;\n    public abstract hideRefreshingIndicator(...args: Array<any>): void;\n\n    // Will be invoked from the adaptor and therefore\n    // must be public\n    public abstract onNewItemsReady(items: Array<any>): Array<any>;\n\n    public abstract onItemsReady(): void;\n}\n\n","import * as dependencies from '@polpware/fe-dependencies';\nimport { pushArray } from '@polpware/fe-utilities';\n\nimport { IViewInstance } from '@polpware/fe-mvc';\n\nconst _ = dependencies.underscore;\nconst noop = _.noop;\n\nexport function adaptAngularToController(context): IViewInstance {\n    return {\n        $data: {\n            init: function() {\n                context.$scope.moreDataCanBeLoaded = false;\n            },\n            setRefreshCallback: function(callback) {\n                context.$scope.callbacks.onRefresh = callback;\n            },\n            setInfiniteCallback: function(callback) {\n                context.$scope.callbacks.onInfinite = callback;\n            },\n            clean: function() {\n                context.$scope.onItemsReady();\n            },\n            asyncPush: function(items) {\n                context.$scope.onNewItemsReady(items);\n                context.$scope.onItemsReady();\n            },\n            syncPush: function(items) {\n                context.$scope.onNewItemsReady(items);\n                context.$scope.onItemsReady();\n            },\n\n            asyncPop: function(items) {\n                context.$scope.onItemsReady();\n            },\n            syncPop: function(items) {\n                context.$scope.onItemsReady();\n            },\n            asyncPrepend: function(items) {\n                context.$scope.onNewItemsReady(items);\n                context.$scope.onItemsReady();\n            },\n            syncPrepend: function(items) {\n                context.$scope.onNewItemsReady(items);\n                context.$scope.onItemsReady();\n            },\n            asyncRefresh: noop,\n            syncRefresh: noop,\n            hasMoreData: function(flag) {\n                context.$scope.moreDataCanBeLoaded = flag;\n            },\n            getItems: function() {\n            },\n            setupSearch: function(criteria, callback) {\n                context.$scope.searchCriteria = criteria;\n                context.$scope.doSearch = callback;\n            },\n            updateSearchCriteria: function(criteria) {\n                context.$scope.searchCriteria = criteria;\n            },\n            getAncestor: function() {\n                return context.$scope.ancestor;\n            }\n        },\n        $loader: {\n            show: function() {\n                context.$scope.showLoadingIndicator();\n            },\n            hide: function() {\n                context.$scope.hideLoadingIndicator();\n            }\n        },\n        $refresher: {\n            show: function() {\n                context.$scope.showRefreshingIndicator();\n            },\n            hide: function() {\n                context.$scope.hideRefreshingIndicator();\n            }\n        },\n        $moreLoader: {\n            show: function() {\n                context.$scope.showMoreLoading();\n            },\n            hide: function() {\n                context.$scope.hideMoreLoading();\n            }\n        },\n        $router: {\n            go: function(url, data) {\n                context.$state.go(url, data);\n            }\n        },\n        $render: {\n            ready: function(callback) {\n                context.$scope.callbacks.onViewDidLoad = callback;\n            },\n            destroy: function(callback) {\n                context.$scope.callbacks.onViewWillUnload = callback;\n            },\n            asyncDigest: noop\n        },\n        $navBar: {\n            /**\n             * Get current state\n             * @returns {}\n             */\n            getState: noop,\n            /**\n             * Set state\n             * @param {Boolean} s\n             */\n            setState: noop\n        },\n        $modal: {\n            setData: function(key, data) {\n                context.$scope[key] = data;\n            },\n            getData: function(key) {\n                return context.$scope[key];\n            },\n            build: noop\n        },\n        $popover: {\n            setData: function(key, data) {\n                context.$scope[key] = data;\n            },\n            getData: function(key) {\n                return context.$scope[key];\n            },\n            build: noop,\n            onHidden: noop\n        },\n        $popup: {\n            setData: function(data) {\n                context.$scope.popupInput = _.extend({\n                    confirmed: false\n                }, data);\n            },\n            getData: function() {\n                return context.$scope.popupInput;\n            },\n            build: noop,\n            confirm: noop,\n            prompt: noop,\n            alert: noop\n        },\n        $progressBar: {\n            create: noop,\n            reset: function() {\n                context.$scope.progressBar = 0;\n            },\n            createInfinite: noop,\n            onProgress: function(percentage) {\n                context.$scope.progressBar = percentage;\n            },\n            destroy: noop,\n            destroyInfinite: noop,\n            showAbort: noop\n        },\n        $alertify: context.alertify,\n        $history: {\n            goBack: function() {\n                context.$ionicHistory.goBack();\n            }\n        }\n    };\n}\n\n","import { IViewInstance } from '@polpware/fe-mvc';\nimport { IListMediatorPublic } from '@polpware/fe-mvc';\n// base\nimport {\n    PlatformObliviousListPage\n} from './platform-oblivious-list-page';\n\nimport {\n    adaptAngularToController\n} from './adaptors/angular-to-controller-adaptor';\n\nexport interface IPageLifeCycle {\n    onDocumentReady(...args: Array<any>): void;\n    onDocumentDestroy(...args: Array<any>): void;\n}\n\nexport abstract class FullFeatureListPage\n    extends PlatformObliviousListPage implements IPageLifeCycle {\n\n    onDocumentReady(...args: Array<any>) {\n        // Cache will be provided in its derived class\n        this.ensureDataProvider(...args);\n    }\n\n    onDocumentDestroy(...args: Array<any>) {\n\n        // Cache will be provided in its derived class\n\n        this.turnOffMediator();\n        this.afterMediatorOff();\n    }\n\n    protected abstract ensureDataProvider(...args: Array<any>): void;\n    protected abstract afterMediatorOn(): void;\n    protected abstract afterMediatorOff(): void;\n\n    protected abstract readMediatorFromCache(key: string): IListMediatorPublic;\n    protected abstract writeMediatorIntoCache(key: string, value: IListMediatorPublic): void;\n    protected abstract addOnCacheExpireHandler(key: string): void;\n    protected abstract removeOnCacheExpireHandler(key: string): void;\n\n    // May be not needed. \n    protected onDataProviderReady(dataProvider: any): void {\n        this.buildMediator(dataProvider).then(() => {\n            this.turnOnMediator(false);\n            this.afterMediatorOn();\n        });\n    }\n\n    // Override\n    protected buildViewInstance(): IViewInstance {\n        return adaptAngularToController({\n            $scope: this\n        });\n    }\n\n    public doRefresh() {\n        // Trigger refresh\n        if (this.callbacks.onRefresh) {\n            this.callbacks.onRefresh();\n        }\n    }\n\n    public doInfinite() {\n        // Trigger loading more\n        if (this.callbacks.onInfinite) {\n            this.callbacks.onInfinite();\n        }\n    }\n\n    public showLoadingIndicator(...args: any[]) { }\n\n    public hideLoadingIndicator(...args: any[]) { }\n\n    public setLoadingIndicatorDelay(seconds: number) { }\n\n    public showMoreLoading(...args: any[]) { }\n\n    public hideMoreLoading(...args: any[]) { }\n\n    public showRefreshingIndicator(...args: any[]) { }\n\n    public hideRefreshingIndicator(...args: any[]) { }\n\n}\n\n","import { Subscription } from 'rxjs';\n\nimport {\n    IListMediatorCtorOptions\n} from '@polpware/fe-mvc';\n\nimport {\n    NgStoreListMediator,\n    INgStoreListMediatorPublic\n} from '@polpware/fe-mvc';\n\nimport {\n    ICollectionItem\n} from '@polpware/fe-data';\n\nimport {\n    CollectionStore\n} from '@polpware/fe-data';\n\n\nimport {\n    ISlidingExpireCache\n} from '@polpware/fe-data';\n\n// base\nimport { FullFeatureListPage } from './full-feature-list-page';\n\n// Note that in the class, please avoid to depend on onNewItemsReady,\n// as it is NOT in the update flow.\n\nexport abstract class NgStoreBackedListPage<T extends ICollectionItem>\n    extends FullFeatureListPage {\n\n    protected defaultLivePeriod = 60 * 5;\n\n    // More configuration for constructing dataprovider\n    protected mediatorCtorOptions: IListMediatorCtorOptions;\n\n    protected mediatorCache: ISlidingExpireCache<INgStoreListMediatorPublic>;\n    private _onCacheExpireCallback: any;\n\n    private _storeSubscription: Subscription;\n    public items: T[];\n\n    constructor() {\n        super();\n\n        this.mediatorCtorOptions = {\n            useModel: true,\n            enableInfinite: true,\n            enableRefresh: true\n        };\n        this.items = [];\n        this._onCacheExpireCallback = null;\n    }\n\n    // Override\n    protected turnOnMediator(fromCache: boolean) {\n        super.turnOnMediator(fromCache);\n\n        const store = this.asNgStoreListMeidator.getNgStore();\n        this._storeSubscription = store.getState().subscribe((data) => {\n            const w = data.items as T[];\n            this.items = w;\n            // Note that we must call onItemsReady ... \n            this.onItemsReady();\n        });\n    }\n\n    // Override\n    protected turnOffMediator() {\n        this._storeSubscription.unsubscribe();\n        super.turnOffMediator();\n    }\n\n    // Override\n    protected buildMediator(dataProvider: any): PromiseLike<void> {\n\n        const ctorOptions: IListMediatorCtorOptions = {\n            ...this.mediatorCtorOptions,\n            dataProvider: dataProvider\n        };\n\n        const s = new CollectionStore<T>();\n\n        const m: INgStoreListMediatorPublic = new NgStoreListMediator(ctorOptions);\n        m.setNgStore(s);\n\n        this.listMediator = m;\n        this.listMediator.setUp();\n\n        return Promise.resolve();\n    }\n\n    protected get asNgStoreListMeidator(): INgStoreListMediatorPublic {\n        const m = this.listMediator;\n        return m as INgStoreListMediatorPublic;\n    }\n\n    protected readMediatorFromCache(key: string): INgStoreListMediatorPublic {\n        return this.mediatorCache.get(key, this.defaultLivePeriod);\n    }\n\n    protected writeMediatorIntoCache(key: string, value: INgStoreListMediatorPublic): void {\n        this.mediatorCache.set(key, value, this.defaultLivePeriod, (evt) => {\n            value.tearDown();\n            return evt;\n        });\n    }\n\n    protected addOnCacheExpireHandler(key: string): void {\n        this._onCacheExpireCallback = function(evt) {\n            evt.preventDefault();\n            return evt;\n        };\n\n        this.mediatorCache.addOnExpireHandler(key, this._onCacheExpireCallback);\n    }\n\n    protected removeOnCacheExpireHandler(key: string): void {\n        this.mediatorCache.rmOnExpireHandler(key, this._onCacheExpireCallback);\n        this._onCacheExpireCallback = null;\n    }\n\n    // Default implementation.\n    // Override\n    // Note that in the derived class we do NOT depend on it.\n    onNewItemsReady(items: T[]) {\n        return items;\n    }\n\n}\n\n","import { Subscription } from 'rxjs';\n\nimport { IViewInstance } from '@polpware/fe-mvc';\n\nimport { pushArray } from '@polpware/fe-utilities';\n\nimport {\n    WritableListMediator,\n    IWritableListMediatorCtorOptions,\n    IWritableListMediatorPublic\n} from '@polpware/fe-mvc';\n\nimport {\n    RxjsPoweredWritableListMediator\n} from '@polpware/fe-mvc';\n\nimport {\n    ICollectionItem\n} from '@polpware/fe-data';\n\nimport {\n    ISlidingExpireCache\n} from '@polpware/fe-data';\n\n// base\nimport { FullFeatureListPage } from './full-feature-list-page';\n\n// Note that we use ICollectionItem rather than IModelLike,\n// because we assume the least requirement for the input type.\n// Precisely, the only requirement is that the collection item has an\n// id field. \n\nexport abstract class BackboneBackedListPage<T extends ICollectionItem>\n    extends FullFeatureListPage {\n\n    protected defaultLivePeriod = 60 * 5;\n\n    protected mediatorCache: ISlidingExpireCache<IWritableListMediatorPublic>;\n    private _onCacheExpireCallback: any;\n\n    public items: T[];\n\n    constructor() {\n        super();\n\n        this.items = [];\n        this._onCacheExpireCallback = null;\n    }\n\n    // We use a functon to compute cacheKey, so that we can\n    // compute the cache key with more inputs. \n    protected abstract getCacheKey(...args: any[]): string;\n\n    protected get asWritableListMediator(): IWritableListMediatorPublic {\n        const m = this.listMediator;\n        return m as IWritableListMediatorPublic;\n    }\n\n    // Default implementation for using backbone\n    protected useMediatorWithOnlyLocalDataProvider(localDataProvider: any, localOptions?: object) {\n\n        const ctorOptions: IWritableListMediatorCtorOptions = {\n            dataProvider: localDataProvider,\n            useModel: true,\n            enableInfinite: true,\n            enableRefresh: true\n        };\n\n        const s = new WritableListMediator(ctorOptions);\n        this.listMediator = s;\n        this.listMediator.setUp();\n    }\n\n    protected useMediatorWithGlobalDataProvider(localDataProvider: any, globalDataProvider: any,\n        localOptions?: object, globalOptions?: object) {\n\n        const mediator = new RxjsPoweredWritableListMediator({\n            globalProvider: globalDataProvider,\n            filterFlags: {\n                added: true,\n                removed: true,\n                updated: false\n            },\n            dataProvider: localDataProvider,\n            useModel: true\n        });\n\n        this.listMediator = mediator;\n        this.listMediator.setUp();\n    }\n\n    // Invoked after the new mediator is constructure \n    protected postUseFreshMediator(...args: any[]) {\n        this.turnOnMediator(false, ...args);\n        this.afterMediatorOn();\n    }\n\n    // Invoked after the cached mediator is used \n    protected postUseCachedMediator(...args: any[]) {\n        this.turnOnMediator(true, ...args);\n        this.afterMediatorOn();\n    }\n\n    // Override to support cache\n    protected ensureDataProvider(...args: any[]) {\n        if (this.mediatorCache) {\n\n            const cacheKey = this.getCacheKey(...args);\n            let inCache = false;\n\n            const mediator = this.readMediatorFromCache(cacheKey);\n\n            if (!mediator) { // Not in cache\n\n                this.buildMediator(...args).then(() => {\n                    // set up in the cache\n                    this.writeMediatorIntoCache(cacheKey, this.asWritableListMediator);\n\n                    // case 1:\n                    this.postUseFreshMediator(true, ...args);\n                });\n\n            } else { // In cache\n\n                inCache = true;\n                this.listMediator = mediator;\n\n                // Case 2:\n                this.postUseCachedMediator(...args);\n            }\n\n        } else {\n\n            this.buildMediator(...args).then(() => {\n\n                // Case 3: \n                this.postUseFreshMediator(false, ...args);\n            });\n        }\n    }\n\n    // Override\n    protected afterMediatorOn() {\n        if (this.mediatorCache) {\n            // In this case, we do not Provide any inputs \n            const cacheKey = this.getCacheKey();\n            this.addOnCacheExpireHandler(cacheKey);\n        }\n    }\n\n    // Override\n    protected afterMediatorOff() {\n        if (this.mediatorCache) {\n            // In this case, we do not Provide any inputs\n            const cacheKey = this.getCacheKey();\n            this.removeOnCacheExpireHandler(cacheKey);\n        }\n    }\n\n\n    // Default implementation\n    public onNewItemsReady(items: Array<any>): Array<any> {\n        pushArray(this.items, items);\n        return items;\n    }\n\n    // Default implementation.\n    onItemsReady() {\n        const viewData = this.asWritableListMediator.viewLevelData();\n        // Get the data from the view level data \n        this.items = viewData.models.slice(0);\n    }\n\n    // Note that it is up to the caller to decide how to use the\n    // cached value; we need to precisely tell where there is a value in the cache\n    // for the corresponding key\n    protected readMediatorFromCache(key: string): IWritableListMediatorPublic {\n        return this.mediatorCache.get(key, this.defaultLivePeriod);\n    }\n\n    protected writeMediatorIntoCache(key: string, mediator: IWritableListMediatorPublic): void {\n        this.mediatorCache.set(key, mediator, this.defaultLivePeriod, (evt) => {\n            mediator.tearDown();\n            return evt;\n        });\n    }\n\n    protected addOnCacheExpireHandler(key: string): void {\n        this._onCacheExpireCallback = function(evt) {\n            evt.preventDefault();\n            return evt;\n        };\n\n        this.mediatorCache.addOnExpireHandler(key, this._onCacheExpireCallback);\n    }\n\n    protected removeOnCacheExpireHandler(key: string): void {\n        this.mediatorCache.rmOnExpireHandler(key, this._onCacheExpireCallback);\n        this._onCacheExpireCallback = null;\n    }\n\n}\n\n","import { InjectionToken } from '@angular/core';\n\nexport class BackendSettings {\n    urlBase: string;\n}\n\nexport const BACKEND_SETTINGS = new InjectionToken<BackendSettings>('Backend Settings');\n","import { IRxjsPoweredDirContentMediatorDev, IWritableListMediatorCtorOptions, IWritableListMediatorPublic, RxjsPoweredWritableListMediator } from '@polpware/fe-mvc';\n\nexport interface IDefListBaseMediatorCtorOptions extends IWritableListMediatorCtorOptions {\n    keyword?: string;\n    pageSize?: number;\n}\n\n/** Specifies the internal interface for accessing the properties \n * of the internal implementation of a mediator.\n * \n * This interface is supposed used only in the traditional way of implementing a \n * a class, e.g., the way of xx.extend({}). \n * \n * Using this interface helps the editor to figure out the correct properties \n * when we implement the mediator.\n */\nexport interface IDefListBaseMediatorDev extends IRxjsPoweredDirContentMediatorDev {\n    _filter: string;\n    _keyword: string;\n    _pageSize: number;\n    _fromCache: boolean;\n\n    reComputeDataParams();\n}\n\n/** Specifies the interface that we can use in the controller \n * which uses the mediator.\n *  \n * This interface and the above interface describes the same object in \n * two distinct perspectives. The above one defines the interface from the \n * perspective of implmenting a meditator. This one defines the interface \n * from the perspective of a client.\n * \n * Using this interface helps the editor to figure out the correct methods \n * we may use in the controller and its sub-classes.\n */\nexport interface IDefListBaseMediatorPublic extends IWritableListMediatorPublic {\n\n    // filter is not exposed yet, because we do not know how to use it in the controller yet.\n\n    // We only manipulate pageSize internally, and then\n    // it is not necessary to expose it to the controller.\n\n    keyword(value?: string): string;\n\n    // Read the value of formCache\n    _formCache: boolean;\n    _isInit: boolean;\n}\n\nexport const DefListBaseMediator = RxjsPoweredWritableListMediator.extend({\n\n    /* Properties */\n    Properties: 'filter,keyword,pageSize',\n\n    /**\n     * Override\n     * \n     * @param settings\n     */\n    init: function(settings: IDefListBaseMediatorCtorOptions) {\n        const self: IDefListBaseMediatorDev = this;\n        self._super(settings);\n\n        self._filter = '';\n        // Init \n        self._keyword = settings.keyword || '';\n        self._pageSize = settings.pageSize || 40;\n        self._fromCache = false;\n    },\n\n    /**\n     * Override \n     * Render data in \n     * @param asyncLoaded\n     */\n    renderData: function(asyncLoaded: boolean) {\n        const self: IDefListBaseMediatorDev = this;\n        self._super(asyncLoaded);\n    },\n\n    /**\n     * Override \n     * so that we can reload data even in the case of cache\n     * @param {} fromCache\n     */\n    startService: function(viewInstance, fromCache: boolean) {\n        const self: IDefListBaseMediatorDev = this;\n        self.attachView(viewInstance);\n        if (fromCache === true) {\n            self._fromCache = true;\n            self.renderData(true);\n        } else {\n            self._fromCache = false;\n            // Enforce that keyword is ''\n            self.startServiceImpl();\n        }\n    },\n\n    /**\n     * Override\n     */\n    reComputeDataParams: function() {\n        const self: IDefListBaseMediatorDev = this;\n        // target\n        const state = self._dataProvider.state;\n        state.offset = 0;\n        state.keyword = self._keyword || '';\n    },\n\n    /**\n     * Override\n     */\n    loadInitData: function() {\n        const self: IDefListBaseMediatorDev = this;\n        self.reComputeDataParams();\n        return self._super();\n    }\n\n});\n","\nimport { IFullBackboneCollectionLike, ICollectionItem } from '@polpware/fe-data';\n// base\nimport { BackboneBackedListPage } from '../../mvc/backbone-backed-list-page';\n\nimport {\n    IDefListBaseMediatorCtorOptions,\n    DefListBaseMediator,\n    IDefListBaseMediatorPublic\n} from '../mediators/def-list-base.mediator';\n\nexport interface IDefListBaseControllerSettings {\n    endpointName: string;\n    tableName: string;\n    cacheKey: string;\n}\n\nexport abstract class DefListBaseController<T extends ICollectionItem> extends BackboneBackedListPage<T> {\n\n    constructor(protected readonly _listSettings: IDefListBaseControllerSettings) {\n        // If we navigated to this page, we will have an item available as a nav param\n        super();\n\n        this.mediatorCache = this.getGlobalCache();\n    }\n\n    public get asDefListBaseMediator(): IDefListBaseMediatorPublic {\n        return this.listMediator as IDefListBaseMediatorPublic;\n    }\n\n    /**\n     * Indicates whether the underlying medicator is built from the previous \n     * cache or not. \n     */\n    public get fromCache() {\n        // Get the fromCache value ...\n        return this.listMediator ? this.asDefListBaseMediator._formCache : false;\n    }\n\n    /**\n     * Indicates whether the underlying medicator is still in the init stage, \n     * I.e., the underlying mediator has not conducted any request or not. \n     */\n    public get inInitState() {\n        return this.listMediator ? this.asDefListBaseMediator._isInit : true;\n    }\n\n    protected getCacheKey(): string {\n        return this._listSettings.cacheKey;\n    }\n\n    protected abstract getBackendService(): any;\n    protected abstract getGlobalCache(): any;\n    protected abstract getRelationalDB(): any;\n\n    /**\n     * Builds the underlying mediator\n     * @param keyword The parameter is passed all the way from the\n     * onDocumentReady method.\n     */\n    protected buildMediator(keyword: string): PromiseLike<void> {\n\n        const backendService = this.getBackendService();\n        const backendProvider = backendService.backendProvider;\n\n        let globalDataProvider: IFullBackboneCollectionLike = null;\n\n        const reDBService = this.getRelationalDB();\n        const relDB = reDBService.get();\n\n        // Build collections\n        globalDataProvider = relDB.getTable(this._listSettings.tableName).dataProvider();\n\n        // Local data provider\n        // The parameter is the endpoint defined by backend.service\n        const Ctor = backendProvider.getEndPoint(this._listSettings.endpointName);\n        const localDataProvider = new Ctor();\n\n        this.touchLocalDataProvider(localDataProvider);\n\n        // Init data provider \n        localDataProvider.state.pageSize = 40;\n        localDataProvider.state.keyword = keyword;\n\n        const filterOptions = globalDataProvider ? {\n            added: true,\n            removed: true,\n            updated: false\n        } : {\n                added: false,\n                removed: false,\n                updated: false\n            };\n\n        const ctorOptions: IDefListBaseMediatorCtorOptions = {\n            globalProvider: globalDataProvider,\n            filterFlags: filterOptions,\n            dataProvider: localDataProvider,\n            useModel: true,\n            keyword: keyword,\n            pageSize: 40,\n            enableInfinite: true,\n            enableRefresh: true\n        };\n\n        this.listMediator = this.invokeMediatorCtor(ctorOptions);\n        this.listMediator.setUp();\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Provides a chance to invoke a derived mediator in the derived controller.\n     * @param options\n     */\n    protected invokeMediatorCtor(options: IDefListBaseMediatorCtorOptions) {\n        return new DefListBaseMediator(options);\n    }\n\n    /**\n     * Provides a chance to update the freshly generated data provider.\n     * E.g., we can use this method to update the endpoint url. \n     */\n    protected touchLocalDataProvider(dataProvider: any) {\n    }\n\n}\n","import { ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ICollectionItem } from '@polpware/fe-data';\r\nimport { INgxNoty } from '@polpware/ngx-noty';\r\nimport { Subscription } from 'rxjs';\r\nimport { DefListBaseController, IDefListBaseControllerSettings } from '../controllers/def-list-base.controller';\r\n\r\nexport interface IDefListBaseComponentSettings extends IDefListBaseControllerSettings {\r\n    spinnerName: string;\r\n}\r\n\r\nexport interface ISpinnerLike {\r\n    show(...args: any[]);\r\n    hide(...args: any[]);\r\n    startToListenSpinner(...args: any[]);\r\n    stopListener(...args: any[]);\r\n}\r\n\r\nexport abstract class DefListBaseComponent<T extends ICollectionItem> extends DefListBaseController<T> {\r\n\r\n    @Input() bottomOffset = 0;\r\n    @Input() minHeight = 0;\r\n    @Input() fixedHeight = 0;\r\n    @Input() maxHeight = 0;\r\n    @Input() topOffset = 0;\r\n    @Input() containerClass = '';\r\n    @Input() initHighlightId: string = '';\r\n\r\n    @Output() onSelect = new EventEmitter();\r\n\r\n    @ViewChild('searchControlElem')\r\n    searchControlElem: ElementRef;\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    // Defines the states for the search state machine\r\n    //   waitForInput --> typeKeywordState\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    // \r\n    public searchEnabled: boolean;\r\n    // \r\n    // This flag Decides if we can display a control\r\n    // which further decides the visibility of the search input control.\r\n    //\r\n    // This flag is used when we have another level of\r\n    // controlling whether the search input should be visible or not.\r\n    // E.g., When the space is limited, we may display a control flag\r\n    // to turn on the visiblity of the real search input, and\r\n    // by default only shows the control flag.\r\n    // \r\n    public waitForInputState: boolean;\r\n    //\r\n    // This flag decides if the search input control should be visible\r\n    // or not. \r\n    // \r\n    public typeKeywordState: boolean;\r\n    //\r\n    // This property tracks the current effective keyword. \r\n    // \r\n    public keywordInEffect: string;\r\n    //\r\n    // This flag decides if any keyword is in effctive.\r\n    //\r\n    // It is used when generating the state of the search result.\r\n    // \r\n    public keywordInEffectState: boolean;\r\n    // Search control input\r\n    public searchControl: FormControl;\r\n\r\n    //\r\n    // This property tracks if there is any keyword \r\n    // which may be applied in the future.\r\n    // E.g., though there is a keyword in effect,\r\n    // a user may enter new keyword in the search input control\r\n    // and the new value is not equal to the current effective\r\n    // keyword. In this case, anyFutureKeyword tells the new value. \r\n    public anyFutureKeyword: string;\r\n\r\n    //\r\n    // Tracks the currently selected item.\r\n    // We decide not to change the value of the selected item.\r\n    // Instead, each controller may have its own selected item.\r\n    // Doing so, there is no interference among different controllers,\r\n    // even though they share the same underlying data. \r\n    public selected: T;\r\n\r\n    private _searchKeywordSubr: Subscription;\r\n\r\n    constructor(listSettings: IDefListBaseComponentSettings,\r\n        protected readonly _spinner: ISpinnerLike,\r\n        protected readonly _toastr: INgxNoty) {\r\n        super(listSettings);\r\n        // By default, search is enabled\r\n        this.searchEnabled = true;\r\n        this.searchControl = new FormControl('');\r\n    }\r\n\r\n    // Compute the total number of records from the underlying mediator\r\n    // and further the data provider of the mediator.\r\n    get totalCount() {\r\n        return this.asDefListBaseMediator.dataProvider().state.totalRecords;\r\n    }\r\n\r\n    // As above, compute the loaded number of records so far.\r\n    get offset() {\r\n        return this.asDefListBaseMediator.dataProvider().state.totalRecords;\r\n    }\r\n\r\n    get spinnerName() {\r\n        return (this._listSettings as IDefListBaseComponentSettings).spinnerName;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this._spinner.startToListenSpinner(this.spinnerName);\r\n\r\n        this.onDocumentReady();\r\n        this.startObserveSearchKeyword();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._spinner.stopListener(this.spinnerName);\r\n\r\n        this.onDocumentDestroy();\r\n        this.stopObserveSearchKeyword();\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    // Overrides to tweak the behaviors of the loading/unloading logic\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n    /**\r\n     * Following building a mediator or retrieving a mediator from cache, \r\n     * this method turns on the mediator to trigger network request. \r\n     * \r\n     * @param fromCache\r\n     * @param keyword The parameters from the second one are passed all the way from the \r\n     * onDocumentReady method.\r\n     */\r\n    protected turnOnMediator(fromCache: boolean, keyword: string) {\r\n        super.turnOnMediator(fromCache, keyword);\r\n\r\n        // TODO: Check if we need the following logic?\r\n\r\n        // if (this.searchEnabled) {\r\n        //     // Synchronizing the UI and the internal state\r\n        //     const keyword = this.asDefListBaseMediator.keyword();\r\n        //     if (keyword) {\r\n        //         keyword = keyword.toLowerCase();\r\n        //         this.searchControl.setValue(keyword, {\r\n        //             emitEvent: false\r\n        //         });\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    // Indicators\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Override\r\n    public showLoadingIndicator() {\r\n        this._spinner.show('Loading ...', this.spinnerName);\r\n    }\r\n\r\n    public hideLoadingIndicator() {\r\n        this._spinner.hide(this.spinnerName);\r\n    }\r\n\r\n    // Override\r\n    public showMoreLoading(): void {\r\n        this._spinner.show('Loading ...', this.spinnerName);\r\n    }\r\n\r\n    // Override\r\n    public hideMoreLoading(): void {\r\n        this._spinner.hide(this.spinnerName);\r\n    }\r\n\r\n    // Override\r\n    public showRefreshingIndicator(): void {\r\n        this._spinner.show('Loading ...', this.spinnerName);\r\n    }\r\n\r\n    // Override\r\n    public hideRefreshingIndicator(): void {\r\n        this._spinner.hide(this.spinnerName)\r\n        // Release a message \r\n        this._toastr.success(`List was just refreshed.`,\r\n            'Success', {\r\n            closeButton: true\r\n        });\r\n\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    // Search state machine\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Start to listen for search keyword change\r\n    protected startObserveSearchKeyword() {\r\n        this._searchKeywordSubr = this.searchControl.valueChanges.subscribe(a => {\r\n            a = (a || '').toLowerCase();\r\n            if (a && a !== this.keywordInEffect) {\r\n                this.anyFutureKeyword = a;\r\n            } else {\r\n                this.anyFutureKeyword = '';\r\n            }\r\n        });\r\n    }\r\n\r\n    protected stopObserveSearchKeyword() {\r\n        this._searchKeywordSubr && this._searchKeywordSubr.unsubscribe();\r\n    }\r\n\r\n    // Recomputes the search state\r\n    //\r\n    // \r\n    protected computeSearchState() {\r\n        this.anyFutureKeyword = '';\r\n        this.keywordInEffectState = false;\r\n        this.typeKeywordState = false;\r\n        this.waitForInputState = false;\r\n        let keyword = this.asDefListBaseMediator.keyword();\r\n\r\n        if (keyword) {\r\n            keyword = keyword.toLowerCase();\r\n            this.keywordInEffect = keyword;\r\n            this.keywordInEffectState = true;\r\n\r\n            // Make sure that the search input has the latest value\r\n            let rhs = this.searchControl.value || '';\r\n            rhs = rhs.toLowerCase();\r\n            if (rhs !== keyword) {\r\n                this.searchControl.setValue(keyword, {\r\n                    emitEvent: false\r\n                });\r\n            }\r\n\r\n        } else {\r\n            this.waitForInputState = true;\r\n\r\n            // Make sure that the search input has the latest value\r\n            let rhs = this.searchControl.value || '';\r\n            rhs = rhs.toLowerCase();\r\n            if (rhs) {\r\n                this.searchControl.setValue('', {\r\n                    emitEvent: false\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // Swtiches to the state for providing\r\n    // the search input control for end users.\r\n    // \r\n    public startToTypeKeyword() {\r\n        this.anyFutureKeyword = '';\r\n        this.waitForInputState = false;\r\n        this.keywordInEffectState = false;\r\n        this.typeKeywordState = true;\r\n\r\n        // Schedule focus behavior in next round of UI updating,\r\n        // in order that the above settings are already in effect.\r\n        setTimeout(() => {\r\n            // TODO: Fix this\r\n            // this.focusFolderSearchInput();\r\n        });\r\n    }\r\n\r\n    // Cancel typed keyword and\r\n    // reset to whatever the previous state\r\n    //\r\n    // This operation does not cause new network request.\r\n    public cancelTypedKeyword() {\r\n        this.computeSearchState();\r\n\r\n        // Auto focus the search input\r\n        this.searchControlElem.nativeElement.focus();\r\n    }\r\n\r\n    // Clear up keyword\r\n    //\r\n    // This operation causes new network request.\r\n    public clearKeywordInEffect() {\r\n        this.asDefListBaseMediator.keyword('');\r\n        this.asDefListBaseMediator.refresh(true);\r\n\r\n        // Auto focus the search input\r\n        this.searchControlElem.nativeElement.focus();\r\n    }\r\n\r\n    // Starts a new round of search\r\n    //\r\n    // This operation causes new network request.\r\n    public kickOffSearch() {\r\n        const k = this.searchControl.value;\r\n        // TODO: Normalize into lowercase ?\r\n\r\n        const currentKeyword = this.asDefListBaseMediator.keyword;\r\n        if (k === currentKeyword) {\r\n            // Nothing to do;\r\n            this.computeSearchState();\r\n            return;\r\n        }\r\n\r\n        // Otherwise, move forward to search \r\n        this.asDefListBaseMediator.keyword(k);\r\n        this.asDefListBaseMediator.refresh(true);\r\n    }\r\n\r\n\r\n    // Override\r\n    //\r\n    // The extra operation allows for synchronizing the internal state\r\n    // with the user interface.\r\n    public onItemsReady(): void {\r\n        super.onItemsReady();\r\n\r\n        this.computeSearchState();\r\n\r\n        if (this.initHighlightId) {\r\n            this.highlight(this.initHighlightId);\r\n        }\r\n    }\r\n\r\n    /**\r\n      * Sends a notification back to its parent or client.\r\n      * @param item A data entity.\r\n      */\r\n    selectItem(item: T) {\r\n        this.initHighlightId = null;\r\n        this.selected = item;\r\n        this.onSelect.emit(item);\r\n    }\r\n\r\n    /**\r\n     * Allows the client to highlight an item by Id.\r\n     * @param id\r\n     */\r\n    highlight(id: string) {\r\n        const item = this.items.find(a => a.id == id);\r\n        if (item && this.selected !== item) {\r\n            this.selected = item;\r\n        }\r\n    }\r\n\r\n}\r\n","/*\n * Public API Surface of ngx-mvc\n */\n\nexport * from \"./lib/interfaces/indicators.interface\";\nexport * from \"./lib/mvc/ngstore-backed-list-page\";\nexport * from \"./lib/mvc/adaptors/angular-to-controller-adaptor\";\nexport * from \"./lib/mvc/platform-oblivious-list-page\";\nexport * from \"./lib/mvc/backbone-backed-list-page\";\nexport * from \"./lib/mvc/full-feature-list-page\";\nexport * from \"./lib/mvc/mediator-compatible-page.interface\";\nexport * from \"./lib/services/backend-settings.service\";\nexport * from \"./lib/pages/mediators/def-list-base.mediator\";\nexport * from \"./lib/pages/controllers/def-list-base.controller\";\nexport * from \"./lib/pages/components/def-list-base.component\";\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["hInterface.underscore","_","dependencies.underscore"],"mappings":"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"}
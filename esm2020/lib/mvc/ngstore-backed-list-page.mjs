import { NgStoreListMediator } from '@polpware/fe-mvc';
import { CollectionStore } from '@polpware/fe-data';
// base
import { FullFeatureListPage } from './full-feature-list-page';
// Note that in the class, please avoid to depend on onNewItemsReady,
// as it is NOT in the update flow.
export class NgStoreBackedListPage extends FullFeatureListPage {
    constructor() {
        super();
        this.defaultLivePeriod = 60 * 5;
        this.mediatorCtorOptions = {
            useModel: true,
            enableInfinite: true,
            enableRefresh: true
        };
        this.items = [];
        this._onCacheExpireCallback = null;
    }
    // Override
    turnOnMediator(fromCache) {
        super.turnOnMediator(fromCache);
        const store = this.asNgStoreListMeidator.getNgStore();
        this._storeSubscription = store.getState().subscribe((data) => {
            const w = data.items;
            this.items = w;
            // Note that we must call onItemsReady ... 
            this.onItemsReady();
        });
    }
    // Override
    turnOffMediator() {
        this._storeSubscription.unsubscribe();
        super.turnOffMediator();
    }
    // Override
    buildMediator(dataProvider) {
        const ctorOptions = {
            ...this.mediatorCtorOptions,
            dataProvider: dataProvider
        };
        const s = new CollectionStore();
        const m = new NgStoreListMediator(ctorOptions);
        m.setNgStore(s);
        this.listMediator = m;
        this.listMediator.setUp();
        return Promise.resolve();
    }
    get asNgStoreListMeidator() {
        const m = this.listMediator;
        return m;
    }
    readMediatorFromCache(key) {
        return this.mediatorCache.get(key, this.defaultLivePeriod);
    }
    writeMediatorIntoCache(key, value) {
        this.mediatorCache.set(key, value, this.defaultLivePeriod, (evt) => {
            value.tearDown();
            return evt;
        });
    }
    addOnCacheExpireHandler(key) {
        this._onCacheExpireCallback = function (evt) {
            evt.preventDefault();
            return evt;
        };
        this.mediatorCache.addOnExpireHandler(key, this._onCacheExpireCallback);
    }
    removeOnCacheExpireHandler(key) {
        this.mediatorCache.rmOnExpireHandler(key, this._onCacheExpireCallback);
        this._onCacheExpireCallback = null;
    }
    // Default implementation.
    // Override
    // Note that in the derived class we do NOT depend on it.
    onNewItemsReady(items) {
        return items;
    }
}
//# sourceMappingURL=data:application/json;base64,